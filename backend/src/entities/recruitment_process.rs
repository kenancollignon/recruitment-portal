//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recruitment_process")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: Option<String>,
    pub email: Option<String>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::organization::Entity")]
    Organization,
    #[sea_orm(has_many = "super::process_events::Entity")]
    ProcessEvents,
    #[sea_orm(has_many = "super::process_organizations::Entity")]
    ProcessOrganizations,
    #[sea_orm(has_many = "super::user_processes::Entity")]
    UserProcesses,
    #[sea_orm(has_many = "super::user_statuses::Entity")]
    UserStatuses,
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::process_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcessEvents.def()
    }
}

impl Related<super::process_organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcessOrganizations.def()
    }
}

impl Related<super::user_processes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProcesses.def()
    }
}

impl Related<super::user_statuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatuses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
