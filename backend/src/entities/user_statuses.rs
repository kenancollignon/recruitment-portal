//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_statuses")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub status_code: i32,
    #[sea_orm(primary_key)]
    pub process_id: i32,
    #[sea_orm(primary_key)]
    pub organization_id: i32,
    pub user_net_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Organization,
    #[sea_orm(
        belongs_to = "super::recruitment_process::Entity",
        from = "Column::ProcessId",
        to = "super::recruitment_process::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RecruitmentProcess,
    #[sea_orm(
        belongs_to = "super::status::Entity",
        from = "Column::StatusCode",
        to = "super::status::Column::StatusCode",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Status,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserNetId",
        to = "super::user::Column::NetId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(has_many = "super::user_processes::Entity")]
    UserProcesses,
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::recruitment_process::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecruitmentProcess.def()
    }
}

impl Related<super::status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Status.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_processes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProcesses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
