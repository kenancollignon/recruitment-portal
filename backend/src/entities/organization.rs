//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "organization")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: Option<String>,
    pub email: Option<String>,
    pub process_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event::Entity")]
    Event,
    #[sea_orm(has_many = "super::organization_events::Entity")]
    OrganizationEvents,
    #[sea_orm(has_many = "super::process_organizations::Entity")]
    ProcessOrganizations,
    #[sea_orm(
        belongs_to = "super::recruitment_process::Entity",
        from = "Column::ProcessId",
        to = "super::recruitment_process::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RecruitmentProcess,
    #[sea_orm(has_many = "super::user_organizations::Entity")]
    UserOrganizations,
    #[sea_orm(has_many = "super::user_statuses::Entity")]
    UserStatuses,
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::organization_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganizationEvents.def()
    }
}

impl Related<super::process_organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcessOrganizations.def()
    }
}

impl Related<super::recruitment_process::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecruitmentProcess.def()
    }
}

impl Related<super::user_organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganizations.def()
    }
}

impl Related<super::user_statuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatuses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
