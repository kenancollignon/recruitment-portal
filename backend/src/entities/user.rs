//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub net_id: String,
    pub name: Option<String>,
    pub email: Option<String>,
    pub organizations: Option<i32>,
    pub processes: Option<i32>,
    pub statuses: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_invitee::Entity")]
    EventInvitee,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
    #[sea_orm(has_many = "super::user_group::Entity")]
    UserGroup,
    #[sea_orm(has_many = "super::user_organizations::Entity")]
    UserOrganizations,
    #[sea_orm(has_many = "super::user_processes::Entity")]
    UserProcesses,
    #[sea_orm(has_many = "super::user_statuses::Entity")]
    UserStatuses,
}

impl Related<super::event_invitee::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventInvitee.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<super::user_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroup.def()
    }
}

impl Related<super::user_organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganizations.def()
    }
}

impl Related<super::user_processes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProcesses.def()
    }
}

impl Related<super::user_statuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatuses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
