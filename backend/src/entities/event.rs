//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub location: Option<String>,
    pub time: Option<Time>,
    pub duration: Option<Time>,
    pub organization_id: Option<i32>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_invitee::Entity")]
    EventInvitee,
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Organization,
    #[sea_orm(has_many = "super::organization_events::Entity")]
    OrganizationEvents,
    #[sea_orm(has_many = "super::process_events::Entity")]
    ProcessEvents,
}

impl Related<super::event_invitee::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventInvitee.def()
    }
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::organization_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganizationEvents.def()
    }
}

impl Related<super::process_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcessEvents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
